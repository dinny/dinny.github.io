<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | DIVING FOR FUN]]></title>
  <link href="http://dinny.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://dinny.github.io/"/>
  <updated>2014-04-27T17:01:17+08:00</updated>
  <id>http://dinny.github.io/</id>
  <author>
    <name><![CDATA[Dinny Wu]]></name>
    <email><![CDATA[backtickcode@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash命令行编辑及编码风格约定]]></title>
    <link href="http://dinny.github.io/blog/2012/08/01/bash-commandline-editing-and-coding-style/"/>
    <updated>2012-08-01T21:00:00+08:00</updated>
    <id>http://dinny.github.io/blog/2012/08/01/bash-commandline-editing-and-coding-style</id>
    <content type="html"><![CDATA[<h2>Bash命令行编辑与Readline</h2>

<p>近年来看了不少介绍Linux命令行和shell编程方面的书，包括我翻译的这本<a href="http://book.douban.com/subject/11589828/">《Linux命令行与shell脚本编程大全（第2版）》</a>。尽管这些书都中规中矩地介绍了命令行常用的命令、shell的启动配置、shell的环境变量及shell编程的种种，但鲜有书肯花一定的篇幅来介绍跟shell交互时命令行编辑方面的内容，而命令行编辑在日常的命令行使用中恰恰非常重要。bash的命令行编辑功能由<a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">Readline</a>提供。很多脚本语言的交互式shell的行编辑功能也都由该库提供。比如Python和gnuplot的交互式shell。但由于许可证（Readline采用GPLv3）带来的授权方面的限制，有些脚本语言的交互式shell采用其他一些行编辑库，如<strong><a href="http://www.thrysoee.dk/editline/">libedit</a></strong>、<strong><a href="http://www.astro.caltech.edu/~mcs/tecla/">Tecla</a></strong>等等。也有出于其他考虑使用自有行编辑库的shell，比如zsh使用的就是自己的<a href="http://zsh.sourceforge.net/Guide/zshguide04.html">zle</a>（所以zsh的自动补全机制跟bash的也有所不同）。</p>

<blockquote><p>注意：这里说的命令行编辑（Commandline Editing）跟命令行编辑器（Commandline Text Editor）不同。命令行编辑是指在交互式命令行上对输入的命令进行编辑，而命令行编辑器则是指可在命令行界面中使用的用来编辑文本文件的编辑器，比如<strong>Vim</strong>或<strong>Emacs</strong>都是命令行编辑器。而sed和awk虽然也能处理文本，但它们是用来对文本流进行处理的，所以称为流编辑器（Stream Editor）。</p></blockquote>

<p><strong>Readline</strong>主要提供的命令可分为以下几类：</p>

<ul>
<li>光标移动命令</li>
<li>历史记录命令</li>
<li>文本修改命令</li>
<li>文本复制和删除命令</li>
<li>自动补全命令</li>
<li>键盘宏命令</li>
<li>其他命令</li>
</ul>


<p>具体每个分类都包含哪些命令，可以参考<a href="http://www.gnu.org/software/bash/manual/bashref.html#Readline-Interaction">bash官方文档中相关的介绍</a>。这里就每个分类举几个例子。</p>

<h3>光标移动命令</h3>

<ul>
<li>移到行首：<code>ctrl + a</code></li>
<li>移到行尾：<code>ctrl + e</code></li>
<li>向前移动一个字符：<code>ctrl + f</code></li>
<li>向后移动一个字符：<code>ctrl + b</code></li>
<li>清空屏幕：<code>Ctrl + l</code></li>
</ul>


<h3>历史记录命令</h3>

<ul>
<li>前一历史命令：<code>ctrl + p</code></li>
<li>后一历史命令：<code>ctrl + n</code></li>
<li>逆向搜索历史命令：<code>ctrl + r</code></li>
<li>向前搜索历史命令：<code>ctrl + s</code></li>
</ul>


<h3>文本修改命令</h3>

<ul>
<li>删除当前光标下字符：<code>ctrl + d</code></li>
<li>要输入类似<code>^Q</code>这样的按键组合，可以先按下<code>ctrl + v</code>，然后再按下<code>ctrl + q</code></li>
<li>将光标前面的字符和光标下的字符互换顺序：<code>ctrl + t</code></li>
</ul>


<h3>文本复制和删除命令</h3>

<ul>
<li>删除光标至行尾的字符：<code>ctrl + k</code></li>
<li>删除光标至行首的字符：<code>ctrl + u</code></li>
<li>删除光标前的一个单词：<code>ctrl + w</code>（以空格作为单词分割符，并会将删掉的内容放到kill ring中）</li>
<li>将kill ring顶部的内容复制到在当前位置：<code>ctrl + y</code></li>
</ul>


<h3>自动补全命令</h3>

<ul>
<li>自动补全：<code>TAB</code></li>
<li>列出可能的补全内容是文件名：<code>ctrl + x /</code></li>
<li>列出可能的补全内容是用户名：<code>ctrl + x ~</code></li>
<li>列出可能的补全内容是变量：<code>ctrl + x $</code></li>
<li>列出可能的补全内容是主机名：<code>ctrl + x @</code></li>
<li>列出可能的补全内容是命令：<code>ctrl + x !</code></li>
</ul>


<h3>键盘宏命令</h3>

<ul>
<li>开始录制宏：<code>ctrl + x (</code></li>
<li>结束录制宏：<code>ctrl + x )</code></li>
<li>运行宏：<code>ctrl + x e</code></li>
</ul>


<h3>其他命令</h3>

<ul>
<li>重新读取配置文件：<code>ctrl + x</code> <code>ctrl + r</code></li>
<li>撤销前面的操作：<code>ctrl + x</code> <code>ctrl + u</code></li>
<li>设置标记：<code>ctrl + @</code></li>
<li>交换标记和光标的位置：<code>ctrl + x</code> <code>ctrl + x</code></li>
<li>显示当前shell的版本信息：<code>ctrl + x</code> <code>ctrl + v</code></li>
<li>启动编辑器编辑命令，编辑完成后执行：<code>ctrl + x</code> <code>ctrl + e</code></li>
</ul>


<h2>Bash编码风格规范</h2>

<p>正是Bash跟Linux系统的深度融合，所以一直以来人们都将Bash当成一门不严肃的语言。有时候甚至只是当作一个用来将命令记录下来的工具。如果你只是要用Linux做一些简单的配置和系统管理，那采取这种做法还姑且过得去。而在要构建复杂的工具时，人们通常会借助Python或Ruby一类编程语言来构建脚本，它们能够提供更高级的数据类型供程序使用。但如果你要采用bash来构建较大型的命令行工具时，你就必须遵循一定的编码风格规范。如果你们的项目还没有明确的编码风格规范，那可以参考<a href="http://lug.fh-swf.de/vim/vim-bash/StyleGuideShell.en.pdf">这份编码规范</a>。</p>
]]></content>
  </entry>
  
</feed>
