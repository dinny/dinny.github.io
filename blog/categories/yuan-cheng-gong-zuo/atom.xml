<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 远程工作 | DIVING FOR FUN]]></title>
  <link href="http://dinny.github.io/blog/categories/yuan-cheng-gong-zuo/atom.xml" rel="self"/>
  <link href="http://dinny.github.io/"/>
  <updated>2015-05-13T14:21:44+08:00</updated>
  <id>http://dinny.github.io/</id>
  <author>
    <name><![CDATA[Dinny Wu]]></name>
    <email><![CDATA[backtickcode@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[也谈团队远程工作 - 如何让远程工作更有效]]></title>
    <link href="http://dinny.github.io/blog/2013/07/26/how-to-make-remote-work-powerful/"/>
    <updated>2013-07-26T21:00:00+08:00</updated>
    <id>http://dinny.github.io/blog/2013/07/26/how-to-make-remote-work-powerful</id>
    <content type="html"><![CDATA[<p>最近有同事问我，远程工作到底是怎样一种形式，能否在他的团队中推广试用，以及采用这种工作方式的话如何更有效地管理团队——团队成员之间依然能保持较好的协作和较高的效率。回答这个问题显然不是三五分钟的事情。首先要足够了解自己团队中每个成员的做事方式，才能考虑是否要进行这种转型。相对来说，如果在组建团队的开始阶段就明确了这种方式，那要比现在再去调整容易一些。采用远程方式协作的团队在招聘时，对候选人在<strong>self-motivation</strong>和<strong>self-management</strong>方面的要求要更高一些。要开始推行这种方式，就得明白它的前提条件和适用场景。</p>

<p>在国外，远程工作已经逐渐被人们接受，不少公司都采用了这种方式。这里列几个大家可能听过的名字：<strong>37signals</strong>，<strong>GitHub Inc.</strong>，<strong>Intridea</strong>，<strong>Canonical Ltd.（Ubuntu Maker）</strong>。而实际上支持远程办公的公司还要多得多，比如你可能没想到的<strong>Wind River Systems</strong>，<strong>Red Hat</strong>，<strong>SUSE Labs</strong>，<strong>Cisco Systems</strong>。其中一些公司的产品本身也是为了解决远程工作中的沟通、管理和协作的问题：GitHub的存在是为了解决远程协作开发的问题；37signals的一些产品也是为了解决远程管理项目的实际需要。</p>

<p>但在国内，远程工作依然是个新名词。之前有朋友尝试在他的公司内推行弹性工作时间 + 远程工作的方式。最开始团队只有五六个人时（基本都是一开始的合伙人），这种做法还可行，大家都比较投入，项目完成状况还好。但等到团队到了十人，他再也不提倡这么做了——已经有成员的工作效率大幅下降了，他还要费尽心思去想怎么fire掉这名新进的员工比较合适。</p>

<p>在我之前工作的Intridea，几乎所有人员（包括PM、UX、DEV、QA）都是远程工作，除了公司负责销售和市场的高层每周要在办公室工作三天——相当于值班。当时团队的规模已经过三十人，而我们QA组要跟所有其他组一起协作，所以这中间的沟通、协作完全是建立在彼此完全信任、个人有很强的自我管理和激励的基础上。下面我就从远程工作的基础和前提条件说起。</p>

<h2>What? Why? Who? When？Where? How?</h2>

<p>我们先要理清远程工作的<strong>5W1H</strong>。<strong>What</strong>说的是远程工作的定义，也即团队成员通过网络、电话等方式来实现跟团队内其他成员异地协作的工作方式。跨国公司中常见的多个site之间合作完成一个项目算不算是远程协作呢？这也是远程工作方式中的一种，只不过跟我们今天要讨论的有一点微小的差异，那就是前一种方式中每个site的团队成员都是在同一office工作的，而后一种方式中所有人都处于不同的地理位置。</p>

<p>那我们为什么要远程协作呢（<strong>Why</strong>）？理由可能有很多种。常见的有：吸引适合我们团队的异地人才加入、有助于推动员工的工作-家庭生活平衡、避开城市中交通问题带来的时间开销、服务位于不同地理位置（甚至不同时区）的客户、降低公司的运营成本（办公区租金、物业、办公设施开销），等等。</p>

<p>哪些人员可以通过远程协作完成工作呢（<strong>Who</strong>）？主要有两类人群。一是跟团队其他成员工作的直接耦合性并不高的工种，比如IT行业的UI设计师、Dev、QA、安全顾问，这些工作都可以直接通过项目管理工具和远程交流工具来进行沟通协作，比如Skype、HipChat、Unfuddle、GitHub等。第二类是客观条件和实际需求使然，团队无法直接在一起协作，比如跨星球能源开采（参考电影<strong>Moon</strong>）、户外作业、卫星监测、销售人员等。</p>

<p>那远程协作时工作时间怎么协调呢（<strong>When</strong>）？对于耦合比较紧的团队（业务密集型），可以采用每天固定工作时间段的方式，如早9:00 &ndash; 12:00，13:30 &ndash; 18:30，所有人在这个时间段都处于在线的状态（IM上能找到）。对于外包类型的团队，可以采用弹性工作，每天只要保持同时在线若干小时方便沟通即可（如14:30 &ndash; 17:30）。</p>

<p>远程工作时在什么地方好呢（<strong>Where</strong>）？每个人偏好不太一样，但最好选择能提高你工作效率的空间。比如平时写代码在家里写，安静，有助于提高效率；如果是一些不需要很聚精会神的工作，会去咖啡馆或是图书馆，听听音乐或是空闲翻翻书。以前在杭州的Beta咖啡和纳帕咖啡也看到有人在那边写代码。如果你是要交流的话，出去选个地方还是比较靠谱的。</p>

<p>那么远程工作如何协调比较好呢（<strong>How</strong>）？首先，在组建团队时，要注意考察候选人的自我管理能力。或者这里用自我发展能力更好。如果个人没有清晰的目标，那么这种周围无人监督的环境很容易滋生懒惰情绪和拖延习惯。如果一个人能自发去参与一些开源项目，自愿去参与一些技术资料的本地化工作，那这个人对技术就有一定的热忱，这种人往往是团队里的千里眼，在一些方案的实现上应该多听听他的建议。其次，在划分任务时也尽可能降低耦合，或者根据个人的性格来划分任务。如自制力好的人就给他尽量安排一些单独的模块，自制力不好的人给他多安排一些耦合多的任务。最后，也要尽可能地照顾到个人目标。比如有人就是想一面工作一面旅行，那么可以提前约定好每天工作时间只有六小时，但每天都要有一两个小时的在线沟通预算。</p>

<p>虽然远程工作有一定的优势，但也有很多问题：</p>

<ul>
<li>对团队的管理跟在办公室不同，对耦合较多的项目来说，沟通工具上要做的准备工作更多。</li>
<li>团队内部的沟通不如在办公室那么方便：有时要找的人不在线，就无法进行未做预约的临时沟通。</li>
<li>团队情感方面，虽然有些情况下团队情感可能会比在同一个办公室还要好（当然，需要一些方式，我后面会介绍），但远距离的沟通跟近距离的午饭时间沟通比还是更容易形成孤独感，尤其是对没有伴侣的成员。</li>
<li>干扰。在家工作的话，可能会有家人、亲戚会认为你在家就是有空，临时过来聊天吃饭聚。这对正常的工作安排有一定的冲击。这些临时的事很可能会打断你做了一半的任务。</li>
<li>对网络的重度依赖（尤其是IT工作），需要你有一个非常稳定的网络。</li>
</ul>


<p>理清了这些基本概念，我们来从不同角度看看如何更好的管理远程团队。</p>

<h2>团队组建</h2>

<p>招聘前，要做一些准备工作。现有团队成员可自愿组成招聘委员会，以从多个角度考察候选人的实际能力。这很重要，今天的候选人，很有可能就是以后工作上的合作伙伴，所以面试中的印象很重要。但同时招聘负责人也应周知招聘委员会在面试时应重点考察的几个方面、面试记录中尽可能记录面试中候选人说的事实，而不是面试官的主观感受，以便对诸多候选人有比较一致、公平的考察方向。</p>

<p>招募团队时要强调自主性，尽量吸收有自我发展动力和目标的员工；同时，候选人至少要在某一方面有亮点，或是有很好的基础 + 浓厚的兴趣。这样才能提高整体团队的战斗力。</p>

<p>招募的范围集中在技术社区。虽然在其他地方也会有优秀人才，但在同一社区活动的成员，往往更容易在技术认识或做事方式上达成共识。当然，这不是说你要关上其他的门，而是说这是发现可用人才的重要途径。</p>

<p>员工推荐的朋友/前同事，往往也很靠谱。并不是说，每个推荐过来的候选人都很靠谱，但愿意联系你们的人至少跟目前的团队成员、他的前同事有一些共识，所以才会考虑加入这个团队。通过猎头这种方式，怕的不是猎头收取推荐费用，而是怕碰到不懂行的猎头推荐来不靠谱的人。</p>

<p>在面试时，应明确告诉团队成员为何要进行远程工作，而不是在办公室工作。这样一个简单的告知，可以让团队的信息更透明。同时，告知团队的考量矩阵（技术外）：热忱度、离席率、可靠性、沟通能力、结果驱动、耐心等等。这些维度能够指引他们更好地做事、更好地跟别人一起做事。</p>

<p>达成默契时，要有虚拟工作合同，定期更新合同，让大家都明白这是一种正式的合作关系。比如之前在Intridea，由于公司在中国没有法人代表，我们签署的合同充其量也只是形式上的，并不具备法律效力，只是个君子之约。但签合同和没签合同的责任感还是不一样的。</p>

<p>试用期内做好考察工作（投入度、技术能力、沟通能力）。试用期可以是短期兼职，如果你要考察的仅仅是技术能力的话。但我建议试用期最好还是全职比较好，这样你可以考察新人的综合方面（尤其是投入度）。</p>

<p>另外，团队应收集、设定成员每年的发展目标和任务目标，年终安排固定时间来做业务表现评定，以便以后加薪、提升参考。</p>

<h2>工作方式</h2>

<p>合理的工作方式，能够保证协作更高效。所以在团队组建之初，就应该有一些明确的流程和要求，才不至于形成惯性、以后很难推动。</p>

<p>每个模块都要有一个负责人，另外一个人备份，但只是备份，不是负责人。两个负责人，等于没有负责人。当然，双轨制有一定的作用，但更适合规模已经成型的大团队。</p>

<p>每天都应有虚拟站立会议（10-15分钟），所有人都要冒泡。会后是跟他人沟通的最佳时段。这是每天团队成员希望自己碰到的一些问题得到解答的最佳时机。</p>

<p>每天都应提交工作时间表，顺便写一下当天完成的事情、碰到的问题和要做的事（与前面站立会议略有冲突，但可以侧重一下完成性）。</p>

<p>团队应固定在某个聊天渠道上，如Skype或Gtalk，保证大家工作时处于在线状态，而不是一会儿Gtalk、一会儿Skype。</p>

<p>团队每天应尽可能有一段固定工作时间，跟其他人有个重叠的时间段，这样不管有没有时区的限制，都能让别人在这个时间段内能找到你。如果你要找某人确认某些事，而他不在线，那就拿起电话（否则为什么要让你知道他的电话）。</p>

<p>需要所有开发人员都知道的公共性内容应该放在项目的README、docs或wiki上（推荐README），比如项目简介、Coding Style、API规范等；需要所有QA人员知道的公共性内容都集中放在wiki的某个页面上，更好地组织起来，而不是散落在各处。</p>

<p>项目完成后进行项目总结会，总结好的做法和不好的做法。每个项目结束都应该有这样一个活动，同一个错误不能犯两次。</p>

<p>跟行政部门沟通好，电话费、VPN费用一定要报销。远程工作是有成本的，公司应承担这部分开销，没有道理让个人承担。</p>

<h2>分享和文化</h2>

<p>除了工作方式，多一些团队的分享和活动，可以增加团队内部的熟悉程度和情感交流。尽可能安排一些团队碰面的机会，增加面对面了解其他人的机会。</p>

<ul>
<li>多组织团队参加行业性技术会议（Linux有Linux Kernel Conference、HelloGCC；Ruby有Ruby Conference China、Ruby Tuesday）。当然，参加这些会议是有风险的，团队里牛逼的人做个分享，很有可能被别人挖走。但只要有不错的薪酬、优秀的团队文化和目标，聪明人还是会选择留下来的。</li>
<li>参加一些本地的技术讨论组（BLUG &ndash; Beijing Linux User Group，BPyUG &ndash; Beijing Python User Group等）。这些本地活动能让团队成员在各自的地方多一些本地的圈内朋友，开阔视野。</li>
<li>小规模集体旅游、娱乐等线下集合。懂得放松的团队才能更好的做事。相对来说，远程工作的人更喜欢融入团队短暂的聚会中。大家都很珍惜短暂的相聚，也是线上交流无法替代的交流机会。</li>
<li>多组织团队每年的全公司/区域性的聚会。可以安排在相对固定的时间，最好是一些技术会议附近，这样可以比较长时间的在一起聚聚。</li>
<li>每周的周会（固定时间，1到2个小时），不一定是讨论工作计划，也可以用来交流技术、联络感情。除了技术性topic分享，还可以分享相应的好玩的一些爱好等（如滑雪、钓鱼、滑翔伞、马拉松、攀岩、穿越、摄影、视频制作、行业数据分析、创业产品浏览等）。</li>
<li>企业内部微博。可以分享一些技术性知识，也可以分享一些好玩的内容，或是自己对产品的一些想法。</li>
<li>开设团队Blog。除了供内部交流外，也可以提高在外界的影响力。这对团队的长期发展很有好处。</li>
<li>团队内部Email新闻。类似于Developer Weekly或JavaScript Weekly，不过这份周刊不讨论技术，更多的讨论整个团队这周都在做什么；团队最近的总动向；最近谁有休假安排；还有最近是谁的生日，如何庆祝等。</li>
<li>安排一定的奖励，年终时选出年度贡献大的人，可以是多个奖项。</li>
</ul>


<h2>工具</h2>

<p>选用正确的工具,让每个成员获取项目信息不再痛苦，这样大家才更愿意去查看项目信息，获知项目进度和问题。我把工具放到最后，并不代表它不重要，而是理解了组建团队、团队工作方式和沟通中的需求，才能明确什么样的工具更合适：</p>

<ul>
<li>VPN（Fuck GFW），我们生活在墙内，应时不时“展开壁外调查”。稳定的VPN很重要。之前用过VPN520，可惜后来很不稳定。当然，现在防火长城这么厉害，也应时不时地改改MTU。</li>
<li>Email &amp; Calendar：Google。没用过其他服务，Google的服务在各种平台上的兼容性很好，尤其是移动设备上。</li>
<li>项目管理工具：Unfuddle、BaseCamp。Unfuddle的项目流程做得很全，定制性也很好，但由于JavaScript量太大，有些浏览器上会占用大量资源。但相对来说，还是比BaseCamp好用。</li>
<li>版本控制工具：Git（GitHub/Bitbucket/Self-hosted）、hg和Bazaar。用分布式的版本控制工具吧，不要再为了离线状态无法提交代码而苦恼可。我理解不了为什么现在还有人在用Centralized VCS，但如果一定要用（比如要用历史遗留下来的版本库），那最多也就用用SVN好了。</li>
<li>团队沟通工具：IRC、HipChat、Skype、Yammer（文本性的）；FaceTime，Skype，Google Hangouts（视频）。你不需要全部都用，各个分类里选一个好用的就可以了。HipChat和Skype给我留下了很深的印象。但如果你们的团队聚集了一帮开源爱好者，IRC也是很好的选择。</li>
<li>桌面共享工具：TeamViewer、ScreenSharing.app、WebEx、Skype、Google Hangouts、RealVNC、iMessage、join.me、logmein.com。同上，选用一个合适的就好。之前用的WebEx还是不错的；Skype会有点卡；至于join.me，用的不多。</li>
<li>终端共享工具：tmux。不要跟我说，你现在更新网站还是通过ftp上传文件。这已经是上个世纪的事情了。要登服务器、要用命令行，就得用合适的工具。</li>
<li>语音会议工具：GoToMeeting、WebEx、Cisco Conference Call、iMessage、Skype、FaceTime、Gtalk、Google Hangouts。一样，选用你喜欢的就好。相对来说，GoToMeeting要稳定一些。不过它要求使用跟会议建立者相同版本的客户端，有时你不得不提前十几分钟去下载某个指定版本，比较痛苦。</li>
<li>文档协作工具：wiki。虽然有各种开源的wiki（TWiki、MediaWiki、MoinMoinWiki），但我依然认为Confluence最靠谱，其它几种wiki光插件就够你折腾一两天的。</li>
<li>CI服务器：Jenkins、CruiseControl、Bamboo、TeamCity。如果你还记得Hudson这个名字，请一定将它符号链接到Jenkins。如果没有特殊需求，建议就用Jenkins好了，成熟的框架，插件多，出了问题也好寻求帮助。</li>
<li>时间管理工具：Harvestapp。我也尝试寻找过其他的Time Tracking工具，都不是太好用。这个中规中矩。</li>
<li>除此之外，还有物理的：光线充足的工作间、宽敞的桌子和人体工学座椅、站立式办公桌、人体工学键盘鼠标、摄像头、耳麦等等。哦，别忘了，还有稳定的网络！</li>
</ul>


<p>今天的内容有点多。远程团队管理的内容加起来也够一本小书了。这里只是列一些以前的经验和自己的一些想法。实际上，这些工作方式在后来我跟晓亮、邓强协作，翻译技术书籍时也用过。不过我们并非完全陌生的团队，所以要简单得多。</p>
]]></content>
  </entry>
  
</feed>
