<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Thoughts | DIVING FOR FUN]]></title>
  <link href="http://dinny.github.io/blog/categories/thoughts/atom.xml" rel="self"/>
  <link href="http://dinny.github.io/"/>
  <updated>2014-04-27T16:56:52+08:00</updated>
  <id>http://dinny.github.io/</id>
  <author>
    <name><![CDATA[Dinny Wu]]></name>
    <email><![CDATA[backtickcode@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何给一些Mac命令行工具设置代理服务器]]></title>
    <link href="http://dinny.github.io/blog/2013/04/20/some-tools-after-firewall/"/>
    <updated>2013-04-20T21:00:00+08:00</updated>
    <id>http://dinny.github.io/blog/2013/04/20/some-tools-after-firewall</id>
    <content type="html"><![CDATA[<p>在公司环境里，有些工具在防火墙后面无法直接使用，必须通过HTTP/HTTPS代理服务器才能访问外网的数据。通常，在命令行环境中设置好HTTP_PROXY和HTTPS_PROXY环境变量就能使用（如curl）：</p>

<p><code>bash
➜  ~  export HTTP_PROXY=http://192.168.80.100:3128/
➜  ~  export HTTPS_PROXY=https://192.168.80.100:3128/
</code></p>

<p>但下面这些工具需要特殊设置：</p>

<ul>
<li>homebrew：设置了HTTP_PROXY也不行，还是不能用。需要设置http_proxy才行。
``` bash
➜  ~  brew install git
==> Downloading <a href="http://git-core.googlecode.com/files/git-1.8.2.1.tar.gz">http://git-core.googlecode.com/files/git-1.8.2.1.tar.gz</a></li>
</ul>


<p>curl: (7) Failed to connect to 2404:6800:4008:c00::52: No route to host
Error: Download failed: <a href="http://git-core.googlecode.com/files/git-1.8.2.1.tar.gz">http://git-core.googlecode.com/files/git-1.8.2.1.tar.gz</a>
➜  ~  export http_proxy=<a href="http://192.168.80.100:3128/">http://192.168.80.100:3128/</a>
➜  ~  export https_proxy=<a href="https://192.168.80.100:3128/">https://192.168.80.100:3128/</a>
➜  ~  brew install git
==> Downloading <a href="http://git-core.googlecode.com/files/git-1.8.2.1.tar.gz">http://git-core.googlecode.com/files/git-1.8.2.1.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> make prefix=/usr/local/Cellar/git/1.8.2.1 CC=cc CFLAGS= LDFLAGS= install
==> make CC=cc CFLAGS= LDFLAGS=
==> make clean
==> make CC=cc CFLAGS= LDFLAGS=
==> Downloading <a href="http://git-core.googlecode.com/files/git-manpages-1.8.2.1.tar.gz">http://git-core.googlecode.com/files/git-manpages-1.8.2.1.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Downloading <a href="http://git-core.googlecode.com/files/git-htmldocs-1.8.2.1.tar.gz">http://git-core.googlecode.com/files/git-htmldocs-1.8.2.1.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Caveats
The OS X keychain credential helper has been installed to:
  /usr/local/bin/git-credential-osxkeychain</p>

<p>The &lsquo;contrib&rsquo; directory has been installed to:
  /usr/local/share/git-core/contrib</p>

<p>Bash completion has been installed to:
  /usr/local/etc/bash_completion.d</p>

<p>zsh completion has been installed to:
  /usr/local/share/zsh/site-functions
==> Summary
🍺  /usr/local/Cellar/git/1.8.2.1: 1306 files, 27M, built in 47 seconds
```</p>

<ul>
<li>subversion：在防火墙后面访问不了外面的HTTP repo。需要修改<em>~/.subversion/servers</em>（如果文件不存在需要自行添加）：
``` bash
[groups]
group1 = *.9pm.me</li>
</ul>


<p>[group1]
http-proxy-host = 192.168.80.100
http-proxy-port = 3128</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从一个问题的答案想到的黑客]]></title>
    <link href="http://dinny.github.io/blog/2013/04/13/on-hacker/"/>
    <updated>2013-04-13T21:00:00+08:00</updated>
    <id>http://dinny.github.io/blog/2013/04/13/on-hacker</id>
    <content type="html"><![CDATA[<p>最近，跟朋友几次聊起代码风格，我隔三岔五地提到<a href="en.wikipedia.org/wiki/Greg_Kroah-Hartman">K-H Greg</a>。我先大概介绍一下。自2000年以来，Greg一直都是Linux Kernel最活跃的开发人员之一，现在是USB、driver core、debugfs、kref、kobject、sysfs等Kernel子模块的维护者。</p>

<p>以前看过他写的两个小工具：</p>

<ul>
<li>给Linux Kernel项目写的一个提交记录分析工具 &ndash; <a href="http://repo.or.cz/w/git-dm.git">git-dm</a></li>
<li>将命令行执行的命令通过管道重定向到twitter上的工具 &ndash; <a href="https://github.com/gregkh/bti">bti</a></li>
</ul>


<p>前者用的是Python，后者用的是shell + C。Python的代码风格素来严谨，而shell的代码风格素来粗犷。有心人可以到这两个项目的主页下载代码、看看具体实现中的函数接口和代码风格。在我读过的代码中，这两个项目的代码风格绝对名列前茅。他在代码中很少用一些鲜见的tips或tricks，每条语句都很尽可能清晰易懂、符合规范。</p>

<p>举个最简单的例子，在shell脚本中，他都会记得在函数中给只在函数中用到的变量加上<code>local</code>关键字。这样就防止了在其他函数中或是在调用函数中误用函数中的变量。非常好的处理方式。尤其是对于shell这种很容易出错又很难调试的脚本代码，规范和可读性远比一些技巧更重要。在git-dm中，他设计的基础函数清晰易懂，读起来效率很高，很快就能理清哪段代码做的是什么事情，稍微看一下文档就好了。（除了这部分代码，以前还看过他给kernel提交的补丁。）</p>

<p>高级语言生来就是为了满足人输出代码、理解代码的需要。<strong>可读性要远远高于那些tips或tricks带来的一点点小便宜</strong>。</p>

<p>现在之所以会想到Greg，是因为几个月前的一天，小美问我，我最欣赏的人是谁。这是个太过开放的问题。事实上，各个领域都会有那么一两个人叫你觉得很靠谱。我说，如果将范围限制到我现在从事的领域，那么有两个人，一个是K-H Greg，一个是<a href="http://www.paulgraham.com">Paul Graham</a>。</p>

<p>Greg是最专注的写代码的程序猿之一，可以每天工作超过14个小时，很有贡献精神，热心。最开始接触Linux驱动开发也是基于他写的<a href="http://book.douban.com/subject/1493443/">LDD一书</a>和<a href="http://ftp.be.debian.org/pub/linux/kernel/people/gregkh/ddk/">DDK Live系统</a>。而Paul则通过他独特的思路，促进业界形成了一种新的生态——技术创业。Jobs带来的移动产品革命造福了大众，而Paul发起的产业革命则给行业带来了投资、带来了圈子，使得好的idea得以孵化。Paul在1998年将自己创建的Viaweb卖给Yahoo!拿到第一桶金之后，就着眼投资创业团队。他所创建的YC，今天几乎影响到了所有准备在IT领域创业的年轻人。他写的文章也都有着他自己对行业的见解和理解，很受欢迎。博客中的一些文章经过整理，促成了<a href="http://book.douban.com/subject/6021440/">《黑客与画家》</a>一书。</p>

<p>他们应该算是这个时代我所幸知道的最优秀的黑客中的两个，虽然各自有各自的风格。当然，我不是说，Linus就不是个好厨师。我依然喜欢用git，依然喜欢用Linux。</p>
]]></content>
  </entry>
  
</feed>
